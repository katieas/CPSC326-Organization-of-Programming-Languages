type SimpleType {
  var int v1 = 0
  var double v2 = 0.0
  var string v3 = ""
  var v4 = nil
}

fun int f1() {
  var x = 5
  return nil
  x = 6
  x.y = 6
  x.y.z = "hi!"
  y = f(x)
  var x = (3 % 3)
  var x = (40 / (10 / 2))
  var x = (2 + (3 / (4 + 5)))
  y = (1 + 2)
  y = ((4 / 2) + (2 - (3 * 2)))
  var string s = concat(concat("foo ", "bar "), " baz")
  var double f = ((10.0 / 2.0) - (3.0 + 1.14159))
}

fun int add_one(int x) {
  x = (x + 1)
  return x
}

fun string add(string x, double y) {
  return (x + y)
}

fun int main() {
  while (x >= 1) {
    x = (x - 1)
    print(x)
  }
  while (((x or y) and z) or ((not v) and (not ((v == 0) or (not x))))) {
    print(y)
    return 5
  }
  for i from (3 * 4) downto neg 1 {
    x = (x * i)
  }
  for j from 0 upto fac(n) {
    print(j)
  }
  if true {
    print("true")
  }
  if (x < y) {
    print("x")
  }
  elif (x > y) {
    print("y")
  }
  elif (x == y) {
    print("x or y")
  }
  else {
    print("oops")
  }
  if (x <= y) {
    if (x != y) {
      print("x or y")
    }
    else {
      print("x")
    }
  }
  elif (x > y) {
    print("y")
  }
  else {
    print(add_one(x))
  }
}

fun void comp_(int foo_bar, MyType baz) {
  if ((foo_bar > 0) or (not baz)) {
    while (foo_bar == 1) {
      print("!")
      if (baz == nil) {
        print("")
      }
    }
  }
}

fun int main() {
  var ptr1 = new Node
  var ptr2 = new Node
  var ptr3 = new Node
  ptr1.next = ptr2.ptr2.next
  d = ptr3
  ptr3.next = nil
  ptr1.next.val = 3
  ptr1.next = ptr2.next.val
  ptr1.next.next.next.next = ptr2.next.next.next.next
  if new Node {
    ptr1 = new Node
    ptr2.val = (ptr1.val + ptr3.val)
    ptr3 = setVal(new Node, ptr.val)
  }
}

